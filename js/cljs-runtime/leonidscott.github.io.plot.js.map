{"version":3,"sources":["leonidscott/github/io/plot.cljs"],"mappings":";;AAWA,qBAAA,rBAACA,0FACG,WAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;iBAAA,AAAAE,4CAAAF,eAAA,xEAAaG;WAAb,AAAAD,4CAAAF,eAAA,lEAAwBI;aAAxB,AAAAF,4CAAAF,eAAA,pEAA6BK;aAA7B,AAAAH,4CAAAF,eAAA,pEAAoCM;AAApC,AACE,OAAGC,4DACIC,AAAY,wBAAiBL,YACjC,AAACM,qBAAQL,MACT,AAACK,qBAAQ,iCAAA,fAAIJ,QAAOA,4CACpB,AAACI,qBAAQ,iCAAA,fAAIH,QAAOA;;AAG7B,wEAAA,xEAACI,wIAEC,aAAAC,FAAKG;AAAL,AAAA,IAAAF,aAAAD;YAAA,AAAAE,4CAAAD,WAAA,IAAA,nEAAQE;eAAR,AAAAD,4CAAAD,WAAA,IAAA,tEAAUG;AAAV,AAAA,kDAAA,qEAAqCA;;AAKvC,kCAAA,lCAAMC,4EAAMF;AAAZ,AACE,+DAAA,2CAAA,nGAACK,4KAEE,WAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAApB,4BAAAoB;iBAAA,AAAAnB,4CAAAmB,eAAA,xEAAalB;AAAb,AAAA,0FAAA,mDAAA,2CAAA,kDAAsCA;GAFzC,oFAAA,WAAAc;AAAA,AAIyB,8BAAA,mFAAA,1GAACK,0KAA0B,mBAAAL,nBAACM;GAJrD,sFAAA,WAAAL;AAAA,AAM0B,8BAAA,mFAAA,1GAACI,0KAA0B,mBAAAJ,nBAACK;;;AAMxD;;;;0CAAA,1CAAMC,4FAGHC,EAAEC;AAHL,AAIE,IAAMC,WAAS,6CAAA,7CAACC,8EAAQ,AAACC,8CAAM,8CAAA,9CAACC,kDAAQ,CAAA,MAAKC,SAAS,WAAA,VAAGA;AAAzD,AAAA,0FAAA,2CAAA,+CACO,AAACC,4CAAI,WAAKC;AAAL,AAAQ,QAAGR,IAAE,AAACS,SAASD;aADnC,VACwCN,0DACjC,AAACK,4CAAI,WAAKC;AAAL,AAAQ,QAAGP,IAAE,AAACS,SAASF;GAAKN;;AAG1C,0CAAA,1CAAMS;AAAN,AACE,IAAMC,iBAAe,gDAAA,2CAAA,gDAAA,IAAA,+CAAA,9LAACC;AAAtB,AACE;AAAA,AACE,IAAAC,aAAA,AAAAC,gBAAqBH;IAArBE,iBAAA,AAAAtC,4BAAAsC;QAAA,AAAArC,4CAAAqC,eAAA,/DAAcd;QAAd,AAAAvB,4CAAAqC,eAAA,/DAAgBb;AAAhB,AAAA,0FAAA,qEAAA,mHAAA,2CAAA,gEAAA,eAAA,kGAAA,0DAAA,2CAAA,yDAAA,2CAAA,+CAAA,KAAA,+CAAA,KAAA,gDAAA,KAAA,+CAAA,aAAA,sDAAA,2CAAA,uDAAA,mFAAA,MAAA,aAAA,4DAAA,MAAA,6DAAA,MAAA,8DAAA,aAAA,wDAAA,2CAAA,uDAAA,mFAAA,MAAA,aAAA,4DAAA,MAAA,6DAAA,MAAA,8DAAA,qBAAA,wDAAA,2CAAA,iEAAA,KAAA,kEAAA,6BAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,0DAAA,OAAA,wEAAA,yBAAA,sGAAA,2CAAA,wDAAA,+DAAA,WAAAe,phFAEIzB,+MACkB,AAACQ,wCAAaC,EAAEC,2lEAcjCiB,oHAA0BlB;AAjB/B,AAkBgC,yFAAA,gDAAAgB,lIAACG,mDAAMP,eAAeQ;GAlBtD,kDAAA,IAAA,iDAAA,qBAAA,sGAAA,2CAAA,wDAAA,+DAAA,WAAAH,hMAqBKC,oHAA0BjB;AArB/B,AAsBgC,yFAAA,+CAAAgB,jIAACE,mDAAMP,eAAeQ;GAtBtD,kDAAA,IAAA,iDAAA","names":["re-frame.core/reg-fx","p__26763","map__26764","cljs.core/--destructure-map","cljs.core.get","element-id","data","layout","config","js/module$node_modules$plotly_DOT_js_dist_min$plotly_min","js/document","cljs.core/clj->js","leonidscott.github.io.events.reg_event_fx","p__26765","vec__26766","cljs.core.nth","_","plot-map","leonidscott.github.io.plot/plot","p1__26769#","p1__26770#","reagent.core.create_class","p__26771","map__26772","re-frame.core/dispatch","reagent.core/props","leonidscott.github.io.plot/ellipse-data","a","b","\u03f4-points","cljs.core.into","cljs.core.doall","cljs.core.range","Math/PI","cljs.core.map","\u03f4","Math/cos","Math/sin","leonidscott.github.io.plot/ellipse-plot","ellipse-params","reagent.core.atom","map__26777","cljs.core/deref","p1__26773#","p1__26774#","re-com.core/slider","cljs.core.swap_BANG_","cljs.core/assoc"],"sourcesContent":["(ns leonidscott.github.io.plot\n  (:require\n   [leonidscott.github.io.events :as events]\n   [\"plotly.js-dist-min\" :as plotly]\n   [reagent.core :as r]\n   [re-com.core :as re-com]\n   [re-frame.core :as re]))\n\n\n;;; ****************  Plot effect ****************\n\n(re/reg-fx :effects/plot!\n    (fn [{:keys [element-id data layout config]}]\n      (. plotly react\n         (-> js/document (.getElementById element-id))\n         (clj->js data)\n         (clj->js (if layout layout {}))\n         (clj->js (if config config {})))))\n\n\n(events/reg-event-fx\n  :events/plot\n  (fn [_ [_ plot-map]] {:effects/plot! plot-map}))\n\n\n;;; ****************  General Plot Component ****************\n\n(defn plot [_]\n  (r/create-class\n    {:reagent-render\n     (fn [{:keys [element-id]}] [:div {:id element-id}])\n\n     :component-did-mount #(re/dispatch [:events/plot (r/props %)])\n\n     :component-did-update #(re/dispatch [:events/plot (r/props %)])}))\n\n;;; **************** Specific Plots ****************\n\n;;; Ellipse Parametric Plot\n\n(defn ellipse-data\n  \"x = a cos(t)\n   y = b sin(t)\"\n  [a b]\n  (let [\u03f4-points (into [] (doall (range 0 (* 2 Math/PI) (/ Math/PI 50))))]\n    [{:x (map (fn [\u03f4] (* a (Math/cos \u03f4))) \u03f4-points)\n      :y (map (fn [\u03f4] (* b (Math/sin \u03f4))) \u03f4-points)}]))\n\n\n(defn ellipse-plot []\n  (let [ellipse-params (r/atom {:a 5 :b 2})]\n    (fn []\n      (let [{:keys [a b]} @ellipse-params]\n        [:div.main-plot\n         [plot {:element-id \"ellipse-plot\"\n                :data       (ellipse-data a b)\n                :layout     {:margin {:b 30 :l 30 :t 30 :r 30}\n                             :xaxis {:range [-20 20]\n                                     :showgrid false\n                                     :zeroline false\n                                     :showline true}\n                             :yaxis {:range [-20 20]\n                                     :showgrid false\n                                     :zeroline false\n                                     :showline true}}\n                :config     {:staticPlot true\n                             :responsive true}}]\n         [:div {:style {:display \"flex\"\n                        :flex-direction \"column\"}}\n          [re-com/slider {:model     a\n                          :on-change #(swap! ellipse-params assoc :a %)\n                          :min       0\n                          :max       20}]\n          [re-com/slider {:model     b\n                          :on-change #(swap! ellipse-params assoc :b %)\n                          :min       0\n                          :max       20}]]]))))\n"]}