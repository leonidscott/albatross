{"version":3,"sources":["leonidscott/github/io/naca.cljs"],"mappings":"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","names":["p__26778","map__26779","cljs.core/--destructure-map","cljs.core.get","leonidscott.github.io.naca/camber-line-fn","m","p","x","Math/pow","p__26780","map__26781","leonidscott.github.io.naca/camber-line-gradient-fn","p__26782","map__26783","leonidscott.github.io.naca/thickness-distrubtion-fn","t","open?","a0","a1","a2","a3","a4","Math/sqrt","leonidscott.github.io.naca/upper-surface-fn","yc","yt","\u03f4","Math/sin","Math/cos","leonidscott.github.io.naca/lower-surface-fn","leonidscott.github.io.naca/naca-data","naca-params","x-points","cljs.core.range","Math/PI","cljs.core.map","\u03b2","cljs.core.doall","cljs.core.into","y-c","y-t","Math/atan","u-points","l-points","p1__26784#","p2__26785#","cljs.core.reduce","cljs.core.conj","p1__26786#","p2__26787#","p1__26788#","p2__26789#","p1__26790#","p2__26791#","p__26792","map__26793","leonidscott.github.io.naca/param-slider","value","on-change","min","max","text","goog.string/format","re-com.core/slider","re-com.core/input-text","p__26794","map__26795","m-scale","p-scale","t-scale","unit","leonidscott.github.io.naca/naca-text","round-fn","par","cljs.core._EQ_","leonidscott.github.io.naca/naca-plot","reagent.core.atom","p1__26796#","p1__26797#","p1__26798#","p1__26799#","p1__26800#","cljs.core/deref","leonidscott.github.io.plot/plot","cljs.core.swap_BANG_","cljs.core/assoc","re-com.core/horizontal-bar-tabs","re-com.core/checkbox","cljs.core.assoc"],"sourcesContent":["(ns leonidscott.github.io.naca\n  (:require\n   [goog.string :as gstr]\n   [leonidscott.github.io.plot :as plot]\n   [reagent.core :as r]\n   [re-com.core :as re-com]))\n\n(defn camber-line-fn\n  \"y_{c}(x) =\n     if (0 <= x < p)  => (m/p^2) * (2px - x^2)\n     if (p <= x <= 1) => (m/(1-p)^2) * (1 - 2p + 2px - x^2)\n     else             => 0\"\n  [{:keys [m p]}]\n  (fn [x]\n    (cond\n      (and (<= 0 x) (< x p))\n      (* (/ m (Math/pow p 2))\n         (- (* 2 p x)\n            (Math/pow x 2)))\n\n      (and (<= p x) (<= x 1))\n      (* (/ m\n            (Math/pow (- 1 p) 2))\n         (+ 1 (* -2 p) (* 2 p x) (* -1 (Math/pow x 2))))\n\n      :else 0)))\n\n\n(defn camber-line-gradient-fn\n  \"dy_{c}/dx(x) =\n      if (0 <= x < p)  => 2m/p^2 (p - x)\n      if (p <= x <= 1) => 2m/(1-p)^2 (p - x)\n      else             => 0\"\n  [{:keys [m p]}]\n  (fn [x]\n    (cond\n      (and (<= 0 x) (< x p))\n      (* (/ (* 2 m) (Math/pow p 2))\n         (- p x))\n\n      (and (<= p x) (<= x 1))\n      (* (/ (* 2 m)\n            (Math/pow (- 1 p) 2))\n         (- p x))\n\n      :else 0)))\n\n\n(defn thickness-distrubtion-fn\n  \"y_{t}(x) = (t/0.2) * (a0 sqrt(x) + a1 x + a2 x^2 + a3 x^3 + a4 x^4)\n\n   a0 = 0.2969;\n   a1 = -0.126;\n   a2 = -0.3516;\n   a3 = 0.2843;\n   a4 = -0.1015; (* open trainling edge*)\n   a4 = -0.1036; (* closed trainling edge*)\"\n  [{:keys [t open?]}]\n  (let [a0  0.2969\n        a1 -0.126\n        a2 -0.3516\n        a3  0.284\n        a4 (if open? -0.1015 -0.1036)]\n    (fn [x]\n      (* (/ t 0.2)\n         (+ (* a0 (Math/sqrt x))\n            (* a1 x)\n            (* a2 (Math/pow x 2))\n            (* a3 (Math/pow x 3))\n            (* a4 (Math/pow x 4)))))))\n\n(defn upper-surface-fn\n  \"HOF that takes in:\n    y_c(x) <- camber line function\n    y_t(x) <- thickness distribution function\n    \u03f4(x)   <- change of coordinate system function\n   Returns a function that,\n    when called with a cartesian x coordinate representing a point on the cord line,\n    returns a tuple containing the x and y coordinate to the corresponding point on the upper surface of the foil.\"\n  [yc yt \u03f4]\n  (fn [x]\n    {:x (- x (* (yt x) (Math/sin (\u03f4 x))))\n     :y (+ (yc x) (* (yt x) (Math/cos (\u03f4 x))))}))\n\n(defn lower-surface-fn\n  \"HOF that takes in:\n    y_c(x) <- camber line function\n    y_t(x) <- thickness distribution function\n    \u03f4(x)   <- change of coordinate system function\n   Returns a function that,\n    when called with a cartesian x coordinate representing a point on the cord line,\n    returns a tuple containing the x and y coordinate to the corresponding point on the lower surface of the foil.\"\n  [yc yt \u03f4]\n  (fn [x]\n    {:x (+ x (* (yt x) (Math/sin (\u03f4 x))))\n     :y (- (yc x) (* (yt x) (Math/cos (\u03f4 x))))}))\n\n(defn naca-data\n  [naca-params]\n  (let [x-points (->> (range 0 Math/PI (/ Math/PI 50))\n                      (map (fn [\u03b2] (/ (- 1 (Math/cos \u03b2))\n                                      2)))\n                      doall\n                      (into []))\n        y-c      (camber-line-fn naca-params)\n        y-t      (thickness-distrubtion-fn naca-params)\n        \u03f4        (fn [x] (Math/atan ((camber-line-gradient-fn naca-params) x)))\n        u-points (map (upper-surface-fn y-c y-t \u03f4) x-points)\n        l-points (map (lower-surface-fn y-c y-t \u03f4) x-points)]\n    [{:x x-points\n      :y (map y-c x-points)}\n     {:x (reduce #(conj %1 (:x %2)) [] u-points)\n      :y (reduce #(conj %1 (:y %2)) [] u-points)}\n     {:x (reduce #(conj %1 (:x %2)) [] l-points)\n      :y (reduce #(conj %1 (:y %2)) [] l-points)}]))\n\n(defn param-slider\n  [{:keys [value on-change min max text]}]\n  [:div {:style {:max-width \"100%\"}}\n   [:p [:b text]]\n   [:p {:style {:color \"red\" :font-size \"1em\"}}\n    (gstr/format \"range from %s to %s\" min max)]\n   [:div {:style {:display         \"flex\"\n                  :flex-direction  \"row\"\n                  :flex-wrap       \"nowrap\"\n                  :align-items     \"center\"\n                  :justify-content \"space-between\"}}\n    [re-com/slider {:model     value\n                    :on-change on-change\n                    :min       min\n                    :max       max\n                    :step      (/ max 100)\n                    :parts     {:wrapper {:style {:max-width \"70%\"}}}\n                    :style     {:max-width \"100%\"}}]\n    [re-com/input-text\n     :model     (.toString value)\n     :on-change on-change\n     :width     \"55px\"]]])\n\n\n(defn naca-text\n  [{:keys [:m :p :t :m-scale :p-scale :t-scale :unit]}]\n  (let [round-fn (fn [par]\n                   (if (= unit :naca-unit)\n                     (int par)\n                     (gstr/format \"%.2f\" par)))\n        m (round-fn (* m m-scale))\n        p (round-fn (* p p-scale))\n        t (round-fn (* t t-scale))]\n    [:h1 (if (= unit :naca-unit)\n           (gstr/format \"NACA %s%s%s\" m p (if (< t 10) (str \"0\" t) t))\n           (gstr/format \"NACA\\n(%s, %s, %s)\" m p t))]))\n\n(defn naca-plot []\n  (let [naca-params (r/atom {:m 0.02 :p 0.4 :t 0.12 :open? false :unit :naca-unit})]\n    (fn []\n      (let [m-scale (if (= :naca-unit (:unit @naca-params)) 100 1)\n            p-scale (if (= :naca-unit (:unit @naca-params)) 10 1)\n            t-scale (if (= :naca-unit (:unit @naca-params)) 100 1)]\n        [:div.main-plot\n         [plot/plot {:element-id \"naca-plot\"\n                     :data       (naca-data @naca-params)\n                     :layout     {:margin     {:b 30 :l 30 :t 30 :r 30}\n                                  :xaxis      {:range    [-0.2 1.2]\n                                               :dtick    0.25\n                                               :showgrid false\n                                               :zeroline false\n                                               :showline true}\n                                  :yaxis      {:range       [-0.25 0.25]\n                                               :dtick       0.25\n                                               :showgrid    false\n                                               :zeroline    false\n                                               :showline    true\n                                               :scaleanchor \"x\"\n                                               :scaleratio  1}\n                                  :showlegend false}\n                     :config     {:staticPlot true\n                                  :responsive true}}]\n         [:div.main-plot-controls\n          [:div {:style {:display        \"flex\"\n                         :flex-direction \"column\"}}\n           [param-slider {:value     (* (:m @naca-params) m-scale)\n                          :on-change #(swap! naca-params assoc :m (/ % m-scale))\n                          :min       0\n                          :max       (* m-scale 0.1)\n                          :text      \"M (Max Camber)\"}]\n           [param-slider {:value     (* (:p @naca-params) p-scale)\n                          :on-change #(swap! naca-params assoc :p (/ % p-scale))\n                          :min       0\n                          :max       p-scale\n                          :text      \"P (Position Camber)\"}]\n           [param-slider {:value     (* (:t @naca-params) t-scale)\n                          :on-change #(swap! naca-params assoc :t (/ % t-scale))\n                          :min       0\n                          :max       (* t-scale 0.4)\n                          :text      \"XX (Thickness)\"}]]\n          [:div {:style {:margin-left \"15px\"}}\n           [:p [:b \"Units\"]]\n           [re-com/horizontal-bar-tabs\n            :model (:unit @naca-params)\n            :tabs  [{:id :naca-unit :label [:p \"NACA\"]}\n                    {:id :percentages :label [:p \"%'s\"]}]\n            :on-change #(swap! naca-params assoc :unit %)]\n\n           [:p {:style {:margin \"15px 0 0\"}} [:b \"Open Trailing Edge?\"]]\n           [re-com/checkbox {:model     (:open? @naca-params)\n                             :on-change #(swap! naca-params assoc :open? %)\n                             :label     \"Open Trailing Edge\"}]\n           [naca-text (assoc @naca-params\n                             :m-scale m-scale\n                             :p-scale p-scale\n                             :t-scale t-scale)]]]]))))\n"]}